packages:
  yum:
    gcc: []
    python3-psycopg2: []
    libpq: []
    htop: []
    python3-devel: []
    git: []

commands:
  01_setup_swap:
    # The swap was initially required due memory issues in Flask, Apache ModWSGI, and/or python's
    # ZipFile implementation, now it is needed on low-memory instances because the grpcio (python)
    # subdependency has a buggy compile step that is super memory hungry.  At time of commenting CPU
    # usage is much more of a limiting factor than memory usage.
    ignoreErrors: true
    command: fallocate -l 4G /swapfile && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile && swapon -s
  02_net_core_somaxconn:
    # It is possible to hit connection count limit issues on heavily loaded servers with more than 2
    # cpu cores. (uwsgi logs when this occurs) The default value is 128.
    command: sysctl -w net.core.somaxconn=1024
  03_stop_insane_coredumps:
    # for utterly unfathomable reasons gunicorn+systemd will _coredump_ for minutes on end on some 
    # servers on every deploy. We are a _python_ app. WE DO NOT CARE. This disables coredumps.
    command: mkdir -p /etc/systemd/coredump.conf.d && printf "[Coredump]\\nStorage=none\\nProcessSizeMax=0\\n" > /etc/systemd/coredump.conf.d/custom.conf

container_commands:
  01_setup_profile:
    # quality of life for ssh sessions
    command: mv ./cluster_management/pushed_files/eb_profile.sh /home/ec2-user/.bash_profile; chmod 644 /home/ec2-user/.bash_profile; chown ec2-user /home/ec2-user/.bash_profile; chgrp ec2-user /home/ec2-user/.bash_profile
  02_setup_reasonable_inputrc:
    command: mv ./cluster_management/pushed_files/.inputrc /home/ec2-user/.inputrc; chmod 664 /home/ec2-user/.inputrc; chown ec2-user /home/ec2-user/.inputrc; chgrp ec2-user /home/ec2-user/.inputrc
  03_migrate:
    # django database migrations. FYI these are automatically wrapped in a database transaction, and
    # sometimes they will succeed even when a deploy operation fails.  If this step fails try sshing
    # onto a data processing server, run `processing-stop`, cd into the beiwe-backend folder,
    # do a `git pull`, and then run `python manage.py migrate`, let it finish, and then run
    # `processing-start` (you can then run `htop` to check that celery is running, try tree mode.)
    leader_only: true
    command: time python manage.py migrate
  04_run_optional_deploy_script:
    # the ondeploy script checks specific locations in the s3 bucket for .py files and executes them.
    command: time ./run_task.sh run_custom_ondeploy_script elasticbeanstalk
  05_minify_css:
    # runs the minify command on all assets - slightly overkill
    command: time python scripts/minify_css.py
  00_create_ssl_cert:
    # replacing rsa with ed25519 or ed448 just doesn't work.  2048 is fine, this key gets regenerated
    # at every deploy, and we don't want to bog the server down with something heavier.
    command: time openssl req -x509 -newkey rsa:2048 -days 3650 -noenc -keyout /etc/pki/tls/certs/server.key -out /etc/pki/tls/certs/server.crt -subj "/CN=${DOMAIN_NAME}" -addext "subjectAltName=DNS:${DOMAIN_NAME},DNS:*.${DOMAIN_NAME}"


option_settings:
  aws:elasticbeanstalk:container:python:
    # does this setting do anything for aws linux 2?
    WSGIPath: wsgi.py
  aws:elasticbeanstalk:environment:proxy:
    ProxyServer: apache
  aws:elasticbeanstalk:environment:proxy:staticfiles:
    /static: frontend/static

# - The location to stick custom apache configurations is at /etc/httpd/conf.d/elasticbeanstalk/*.conf
#   (as far as I can tell, anyway.  its declared in the default apache configuration.)
# - To change the number of processes and threads check the ProcFile parameters