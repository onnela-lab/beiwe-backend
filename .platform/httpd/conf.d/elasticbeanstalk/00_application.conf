# there are 3 Elastic Load Balancer configs we need to support:
# 1)   443 ELB as https -> port 80  as http     and    80 ELB as http -> port 80  as http
# 2)   443 ELB as https -> port 443 as https    and    80 ELB as http -> port 80  as http
# 3)   443 ELB as https -> port 443 as https    and    80 ELB as http -> port 443 as https

# 1 is the default configuration when you deploy a server.
# 2 enables last-leg encryption.
# 3 forces last leg encryption always, but it will still get a 301 redirect from Django saying the
#    because it checks the URL that the user typed in via the ELB setting X-Forwarded-Proto.

# Both servers can forward to port 8000, it works fine.

<VirtualHost *:80>
  <Proxy *>
    Require all granted
  </Proxy>
  ProxyPass / http://localhost:8000/ retry=120 timeout=120 connectiontimeout=120
  ProxyPassReverse / http://localhost:8000/
  ProxyPreserveHost on
</VirtualHost>

# required - the Apache config on Elastic Beanstalk is only set to listen on port 80.
# (Also, you can't put a trailing comment on that line.)
Listen 443

<VirtualHost *:443>
  <Proxy *>
    Require all granted
  </Proxy>
  
  # (This configuration of SSL stuff seems to work fine?)
  # The cert is created over in a container command.
  # Couldn't get more aggressive protocols (tls) or non-RSA keys to work right
  SSLEngine             on
  SSLCertificateFile    "/etc/pki/tls/certs/server.crt"
  SSLCertificateKeyFile "/etc/pki/tls/certs/server.key"
  SSLCipherSuite        EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
  SSLProtocol           All -SSLv2 -SSLv3
  SSLHonorCipherOrder   On
  SSLSessionTickets     On
  
  # we can use strict transport security here and because it is just an http header browsers
  # see it and respect it. Cool.
  Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
  Header always set X-Frame-Options DENY
  Header always set X-Content-Type-Options nosniff
  
  ProxyPass / http://localhost:8000/ retry=0 retry=120 timeout=120 connectiontimeout=120
  ProxyPassReverse / http://localhost:8000/
  ProxyPreserveHost on
  
  # leave commented out - the load balancer applies X-Forwarded-Proto before it hits our encrypted
  # last leg, we want the context to be from before our encrypted leg.
  # RequestHeader set X-Forwarded-Proto "https" early
</VirtualHost>